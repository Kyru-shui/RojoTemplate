--!native
--!optimize 2
--!nocheck
--!nolint
--#selene: allow(unused_variable, incorrect_standard_library_use, global_usage)
-- Server generated by Zap v0.6.8 (https://github.com/red-blox/zap)
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local outgoing_buff: buffer
local outgoing_used: number
local outgoing_size: number
local outgoing_inst: { Instance }
local outgoing_apos: number

local incoming_buff: buffer
local incoming_read: number
local incoming_inst: { Instance }
local incoming_ipos: number

-- thanks to https://dom.rojo.space/binary.html#cframe
local CFrameSpecialCases = {
	CFrame.Angles(0, 0, 0),
	CFrame.Angles(math.rad(90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(180)),
	CFrame.Angles(math.rad(-90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(90)),
	CFrame.Angles(0, math.rad(90), math.rad(90)),
	CFrame.Angles(0, 0, math.rad(90)),
	CFrame.Angles(0, math.rad(-90), math.rad(90)),
	CFrame.Angles(math.rad(-90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(-90), 0),
	CFrame.Angles(math.rad(90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(90), math.rad(180)),
	CFrame.Angles(0, math.rad(-90), math.rad(180)),
	CFrame.Angles(0, math.rad(180), math.rad(0)),
	CFrame.Angles(math.rad(-90), math.rad(-180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(180)),
	CFrame.Angles(math.rad(90), math.rad(180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(-90)),
	CFrame.Angles(0, math.rad(-90), math.rad(-90)),
	CFrame.Angles(0, math.rad(-180), math.rad(-90)),
	CFrame.Angles(0, math.rad(90), math.rad(-90)),
	CFrame.Angles(math.rad(90), math.rad(90), 0),
	CFrame.Angles(0, math.rad(90), 0),
	CFrame.Angles(math.rad(-90), math.rad(90), 0),
}

local function alloc(len: number)
	if outgoing_used + len > outgoing_size then
		while outgoing_used + len > outgoing_size do
			outgoing_size = outgoing_size * 2
		end

		local new_buff = buffer.create(outgoing_size)
		buffer.copy(new_buff, 0, outgoing_buff, 0, outgoing_used)

		outgoing_buff = new_buff
	end

	outgoing_apos = outgoing_used
	outgoing_used = outgoing_used + len

	return outgoing_apos
end

local function read(len: number)
	local pos = incoming_read
	incoming_read = incoming_read + len

	return pos
end

local function save()
	return {
		buff = outgoing_buff,
		used = outgoing_used,
		size = outgoing_size,
		inst = outgoing_inst,
	}
end

local function load(data: {
	buff: buffer,
	used: number,
	size: number,
	inst: { Instance },
})
	outgoing_buff = data.buff
	outgoing_used = data.used
	outgoing_size = data.size
	outgoing_inst = data.inst
end

local function load_empty()
	outgoing_buff = buffer.create(64)
	outgoing_used = 0
	outgoing_size = 64
	outgoing_inst = {}
end

load_empty()

local types = {}
if not RunService:IsRunning() then
	local noop = function() end
	return table.freeze({
		sendEvents = noop,
		CallFX = table.freeze({
			fire = noop,
			fireAll = noop,
			fireExcept = noop,
			fireList = noop,
			fireSet = noop
		}),
		M1 = table.freeze({
			setCallback = noop
		}),
		M1Replication = table.freeze({
			fire = noop,
			fireAll = noop,
			fireExcept = noop,
			fireList = noop,
			fireSet = noop
		}),
		OnM1Cancelled = table.freeze({
			fire = noop,
			fireAll = noop,
			fireExcept = noop,
			fireList = noop,
			fireSet = noop
		}),
		Equip = table.freeze({
			setCallback = noop
		}),
		EquipReplicate = table.freeze({
			fire = noop,
			fireAll = noop,
			fireExcept = noop,
			fireList = noop,
			fireSet = noop
		}),
		OnDashCancelled = table.freeze({
			fire = noop,
			fireAll = noop,
			fireExcept = noop,
			fireList = noop,
			fireSet = noop
		}),
		Block = table.freeze({
			setCallback = noop
		}),
		BlockReplication = table.freeze({
			fire = noop,
			fireAll = noop,
			fireExcept = noop,
			fireList = noop,
			fireSet = noop
		}),
		Sprint = table.freeze({
			setCallback = noop
		}),
		M2 = table.freeze({
			setCallback = noop
		}),
		M2Replication = table.freeze({
			fire = noop,
			fireAll = noop,
			fireExcept = noop,
			fireList = noop,
			fireSet = noop
		}),
		Feint = table.freeze({
			setCallback = noop
		}),
		DownSlam = table.freeze({
			setCallback = noop
		}),
		DownSlamReplication = table.freeze({
			fire = noop,
			fireAll = noop,
			fireExcept = noop,
			fireList = noop,
			fireSet = noop
		}),
		ReplicateRagdoll = table.freeze({
			fire = noop,
			fireAll = noop,
			fireExcept = noop,
			fireList = noop,
			fireSet = noop
		}),
		SprintM1 = table.freeze({
			setCallback = noop
		}),
		SprintM1Replication = table.freeze({
			fire = noop,
			fireAll = noop,
			fireExcept = noop,
			fireList = noop,
			fireSet = noop
		}),
		SlideReplication = table.freeze({
			fire = noop,
			fireAll = noop,
			fireExcept = noop,
			fireList = noop,
			fireSet = noop
		}),
		Climb = table.freeze({
			setCallback = noop
		}),
		ClimbReplication = table.freeze({
			fire = noop,
			fireAll = noop,
			fireExcept = noop,
			fireList = noop,
			fireSet = noop
		}),
		NotifyClimb = table.freeze({
			setCallback = noop
		}),
		Dash = table.freeze({
			setCallback = noop
		}),
		Slide = table.freeze({
			setCallback = noop
		}),
		DoubleJump = table.freeze({
			setCallback = noop
		}),
	}) :: Events
end
local Players = game:GetService("Players")

if RunService:IsClient() then
	error("Cannot use the server module on the client!")
end
local reliable = ReplicatedStorage:FindFirstChild("Anti_Skid_9000_RELIABLE")
if reliable == nil then
	reliable = Instance.new("RemoteEvent")
	reliable.Name = "Anti_Skid_9000_RELIABLE"
	reliable.Parent = ReplicatedStorage
end

local unreliable = ReplicatedStorage:FindFirstChild("Anti_Skid_9000_UNRELIABLE")
if unreliable == nil then
	unreliable = Instance.new("UnreliableRemoteEvent")
	unreliable.Name = "Anti_Skid_9000_UNRELIABLE"
	unreliable.Parent = ReplicatedStorage
end
local player_map = {}

local function load_player(player: Player)
	if player_map[player] then
		load(player_map[player])
	else
		load_empty()
	end
end

Players.PlayerRemoving:Connect(function(player)
	player_map[player] = nil
end)

local function sendEvents()
	for player, outgoing in player_map do
		if outgoing.used > 0 then
			local buff = buffer.create(outgoing.used)
			buffer.copy(buff, 0, outgoing.buff, 0, outgoing.used)

			reliable:FireClient(player, buff, outgoing.inst)

			outgoing.buff = buffer.create(64)
			outgoing.used = 0
			outgoing.size = 64
			table.clear(outgoing.inst)
		end
	end
end

RunService.Heartbeat:Connect(sendEvents)

local events = table.create(25)
reliable.OnServerEvent:Connect(function(player, buff, inst)
	incoming_buff = buff
	incoming_inst = inst
	incoming_read = 0
	incoming_ipos = 0
	local len = buffer.len(buff)
	while incoming_read < len do
		local id = buffer.readu8(buff, read(1))
		if id == 2 then
			local value
			if events[2] then
				task.spawn(events[2], player, value)
			end
		elseif id == 5 then
			local value
			if events[5] then
				task.spawn(events[5], player, value)
			end
		elseif id == 8 then
			local value
			value = {}
			local enum_value_1 = buffer.readu8(incoming_buff, read(1))
			if enum_value_1 == 0 then
				value = "Begin"
			elseif enum_value_1 == 1 then
				value = "End"
			else
				error("Invalid enumerator")
			end
			if events[8] then
				task.spawn(events[8], player, value)
			end
		elseif id == 10 then
			local value
			value = {}
			local enum_value_1 = buffer.readu8(incoming_buff, read(1))
			if enum_value_1 == 0 then
				value = "Begin"
			elseif enum_value_1 == 1 then
				value = "End"
			else
				error("Invalid enumerator")
			end
			if events[10] then
				task.spawn(events[10], player, value)
			end
		elseif id == 11 then
			local value
			if events[11] then
				task.spawn(events[11], player, value)
			end
		elseif id == 13 then
			local value
			if events[13] then
				task.spawn(events[13], player, value)
			end
		elseif id == 14 then
			local value
			if events[14] then
				task.spawn(events[14], player, value)
			end
		elseif id == 17 then
			local value
			if events[17] then
				task.spawn(events[17], player, value)
			end
		elseif id == 23 then
			local call_id = buffer.readu8(buff, read(1))
			local value
			value = {}
			local enum_value_1 = buffer.readu8(incoming_buff, read(1))
			if enum_value_1 == 0 then
				value = "Horizontal"
			elseif enum_value_1 == 1 then
				value = "Vertical"
			else
				error("Invalid enumerator")
			end
			if events[23] then
				task.spawn(function(player, call_id, value)
					local rets = events[23](player, value)
					load_player(player)
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, 23)
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, call_id)
					if rets == "Success" then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					elseif rets == "Failure" then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
					else
						error("Invalid enumerator")
					end
					player_map[player] = save()
				end, player, call_id, value)
			end
		elseif id == 24 then
			local call_id = buffer.readu8(buff, read(1))
			local value
			value = {}
			local enum_value_1 = buffer.readu8(incoming_buff, read(1))
			if enum_value_1 == 0 then
				value = "Begin"
			elseif enum_value_1 == 1 then
				value = "End"
			else
				error("Invalid enumerator")
			end
			if events[24] then
				task.spawn(function(player, call_id, value)
					local rets = events[24](player, value)
					load_player(player)
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, 24)
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, call_id)
					if rets.attempt == "Success" then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					elseif rets.attempt == "Failure" then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
					else
						error("Invalid enumerator")
					end
					if rets.status == nil then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					else
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
						if rets.status == "Start" then
							alloc(1)
							buffer.writeu8(outgoing_buff, outgoing_apos, 0)
						elseif rets.status == "End" then
							alloc(1)
							buffer.writeu8(outgoing_buff, outgoing_apos, 1)
						else
							error("Invalid enumerator")
						end
					end
					player_map[player] = save()
				end, player, call_id, value)
			end
		elseif id == 25 then
			local call_id = buffer.readu8(buff, read(1))
			local value
			if events[25] then
				task.spawn(function(player, call_id, value)
					local rets = events[25](player, value)
					load_player(player)
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, 25)
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, call_id)
					if rets == "Success" then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					elseif rets == "Failure" then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
					else
						error("Invalid enumerator")
					end
					player_map[player] = save()
				end, player, call_id, value)
			end
		else
			error("Unknown event id")
		end
	end
end)
unreliable.OnServerEvent:Connect(function(player, buff, inst)
	incoming_buff = buff
	incoming_inst = inst
	incoming_read = 0
	incoming_ipos = 0
	local id = buffer.readu8(buff, read(1))
	if id == 20 then
		local value
		if events[20] then
			task.spawn(events[20], player, value)
		end
	elseif id == 22 then
		local value
		if events[22] then
			task.spawn(events[22], player, value)
		end
	else
		error("Unknown event id")
	end
end)
local returns = table.freeze({
	sendEvents = sendEvents,
	CallFX = table.freeze({
		fire = function(player: Player, value: ({
			effectName: (string),
			stage: (string),
			miscData: ({
				caster: (Instance),
				victim: ((Instance)?),
				extraData: ((unknown)),
			}),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			local len_1 = #value.effectName
			assert(len_1 >= 0)
			assert(len_1 <= 50)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, value.effectName, len_1)
			local len_2 = #value.stage
			assert(len_2 >= 0)
			assert(len_2 <= 25)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_2)
			alloc(len_2)
			buffer.writestring(outgoing_buff, outgoing_apos, value.stage, len_2)
			table.insert(outgoing_inst, value.miscData.caster)
			if value.miscData.victim == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				table.insert(outgoing_inst, value.miscData.victim)
			end
			if value.miscData.extraData == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				table.insert(outgoing_inst, value.miscData.extraData)
			end
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable:FireClient(player, buff, outgoing_inst)
		end,
		fireAll = function(value: ({
			effectName: (string),
			stage: (string),
			miscData: ({
				caster: (Instance),
				victim: ((Instance)?),
				extraData: ((unknown)),
			}),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			local len_1 = #value.effectName
			assert(len_1 >= 0)
			assert(len_1 <= 50)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, value.effectName, len_1)
			local len_2 = #value.stage
			assert(len_2 >= 0)
			assert(len_2 <= 25)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_2)
			alloc(len_2)
			buffer.writestring(outgoing_buff, outgoing_apos, value.stage, len_2)
			table.insert(outgoing_inst, value.miscData.caster)
			if value.miscData.victim == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				table.insert(outgoing_inst, value.miscData.victim)
			end
			if value.miscData.extraData == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				table.insert(outgoing_inst, value.miscData.extraData)
			end
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable:FireAllClients(buff, outgoing_inst)
		end,
		fireExcept = function(except: Player, value: ({
			effectName: (string),
			stage: (string),
			miscData: ({
				caster: (Instance),
				victim: ((Instance)?),
				extraData: ((unknown)),
			}),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			local len_1 = #value.effectName
			assert(len_1 >= 0)
			assert(len_1 <= 50)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, value.effectName, len_1)
			local len_2 = #value.stage
			assert(len_2 >= 0)
			assert(len_2 <= 25)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_2)
			alloc(len_2)
			buffer.writestring(outgoing_buff, outgoing_apos, value.stage, len_2)
			table.insert(outgoing_inst, value.miscData.caster)
			if value.miscData.victim == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				table.insert(outgoing_inst, value.miscData.victim)
			end
			if value.miscData.extraData == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				table.insert(outgoing_inst, value.miscData.extraData)
			end
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for _, player in Players:GetPlayers() do
				if player ~= except then
					unreliable:FireClient(player, buff, outgoing_inst)
				end
			end
		end,
		fireList = function(list: { Player }, value: ({
			effectName: (string),
			stage: (string),
			miscData: ({
				caster: (Instance),
				victim: ((Instance)?),
				extraData: ((unknown)),
			}),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			local len_1 = #value.effectName
			assert(len_1 >= 0)
			assert(len_1 <= 50)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, value.effectName, len_1)
			local len_2 = #value.stage
			assert(len_2 >= 0)
			assert(len_2 <= 25)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_2)
			alloc(len_2)
			buffer.writestring(outgoing_buff, outgoing_apos, value.stage, len_2)
			table.insert(outgoing_inst, value.miscData.caster)
			if value.miscData.victim == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				table.insert(outgoing_inst, value.miscData.victim)
			end
			if value.miscData.extraData == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				table.insert(outgoing_inst, value.miscData.extraData)
			end
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for _, player in list do
				unreliable:FireClient(player, buff, outgoing_inst)
			end
		end,
		fireSet = function(set: { [Player]: true }, value: ({
			effectName: (string),
			stage: (string),
			miscData: ({
				caster: (Instance),
				victim: ((Instance)?),
				extraData: ((unknown)),
			}),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			local len_1 = #value.effectName
			assert(len_1 >= 0)
			assert(len_1 <= 50)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, value.effectName, len_1)
			local len_2 = #value.stage
			assert(len_2 >= 0)
			assert(len_2 <= 25)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_2)
			alloc(len_2)
			buffer.writestring(outgoing_buff, outgoing_apos, value.stage, len_2)
			table.insert(outgoing_inst, value.miscData.caster)
			if value.miscData.victim == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				table.insert(outgoing_inst, value.miscData.victim)
			end
			if value.miscData.extraData == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				table.insert(outgoing_inst, value.miscData.extraData)
			end
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for player in set do
				unreliable:FireClient(player, buff, outgoing_inst)
			end
		end,
	}),
	M1Replication = table.freeze({
		fire = function(player: Player, value: ({
			caster: (Instance),
			victim: ((Instance)?),
			weaponUsed: (string),
			comboCount: (number),
			timeCasted: (number),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 3)
			table.insert(outgoing_inst, value.caster)
			if value.victim == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				table.insert(outgoing_inst, value.victim)
			end
			local len_1 = #value.weaponUsed
			assert(len_1 <= 45)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, value.weaponUsed, len_1)
			assert(value.comboCount <= 4)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, value.comboCount)
			alloc(8)
			buffer.writef64(outgoing_buff, outgoing_apos, value.timeCasted)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable:FireClient(player, buff, outgoing_inst)
		end,
		fireAll = function(value: ({
			caster: (Instance),
			victim: ((Instance)?),
			weaponUsed: (string),
			comboCount: (number),
			timeCasted: (number),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 3)
			table.insert(outgoing_inst, value.caster)
			if value.victim == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				table.insert(outgoing_inst, value.victim)
			end
			local len_1 = #value.weaponUsed
			assert(len_1 <= 45)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, value.weaponUsed, len_1)
			assert(value.comboCount <= 4)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, value.comboCount)
			alloc(8)
			buffer.writef64(outgoing_buff, outgoing_apos, value.timeCasted)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable:FireAllClients(buff, outgoing_inst)
		end,
		fireExcept = function(except: Player, value: ({
			caster: (Instance),
			victim: ((Instance)?),
			weaponUsed: (string),
			comboCount: (number),
			timeCasted: (number),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 3)
			table.insert(outgoing_inst, value.caster)
			if value.victim == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				table.insert(outgoing_inst, value.victim)
			end
			local len_1 = #value.weaponUsed
			assert(len_1 <= 45)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, value.weaponUsed, len_1)
			assert(value.comboCount <= 4)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, value.comboCount)
			alloc(8)
			buffer.writef64(outgoing_buff, outgoing_apos, value.timeCasted)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for _, player in Players:GetPlayers() do
				if player ~= except then
					unreliable:FireClient(player, buff, outgoing_inst)
				end
			end
		end,
		fireList = function(list: { Player }, value: ({
			caster: (Instance),
			victim: ((Instance)?),
			weaponUsed: (string),
			comboCount: (number),
			timeCasted: (number),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 3)
			table.insert(outgoing_inst, value.caster)
			if value.victim == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				table.insert(outgoing_inst, value.victim)
			end
			local len_1 = #value.weaponUsed
			assert(len_1 <= 45)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, value.weaponUsed, len_1)
			assert(value.comboCount <= 4)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, value.comboCount)
			alloc(8)
			buffer.writef64(outgoing_buff, outgoing_apos, value.timeCasted)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for _, player in list do
				unreliable:FireClient(player, buff, outgoing_inst)
			end
		end,
		fireSet = function(set: { [Player]: true }, value: ({
			caster: (Instance),
			victim: ((Instance)?),
			weaponUsed: (string),
			comboCount: (number),
			timeCasted: (number),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 3)
			table.insert(outgoing_inst, value.caster)
			if value.victim == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				table.insert(outgoing_inst, value.victim)
			end
			local len_1 = #value.weaponUsed
			assert(len_1 <= 45)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, value.weaponUsed, len_1)
			assert(value.comboCount <= 4)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, value.comboCount)
			alloc(8)
			buffer.writef64(outgoing_buff, outgoing_apos, value.timeCasted)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for player in set do
				unreliable:FireClient(player, buff, outgoing_inst)
			end
		end,
	}),
	OnM1Cancelled = table.freeze({
		fire = function(player: Player, value: ({
			caster: (Instance),
			comboCancelling: (number),
			isFeint: ((boolean)?),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 4)
			table.insert(outgoing_inst, value.caster)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, value.comboCancelling)
			if value.isFeint == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, value.isFeint and 1 or 0)
			end
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable:FireClient(player, buff, outgoing_inst)
		end,
		fireAll = function(value: ({
			caster: (Instance),
			comboCancelling: (number),
			isFeint: ((boolean)?),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 4)
			table.insert(outgoing_inst, value.caster)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, value.comboCancelling)
			if value.isFeint == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, value.isFeint and 1 or 0)
			end
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable:FireAllClients(buff, outgoing_inst)
		end,
		fireExcept = function(except: Player, value: ({
			caster: (Instance),
			comboCancelling: (number),
			isFeint: ((boolean)?),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 4)
			table.insert(outgoing_inst, value.caster)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, value.comboCancelling)
			if value.isFeint == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, value.isFeint and 1 or 0)
			end
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for _, player in Players:GetPlayers() do
				if player ~= except then
					unreliable:FireClient(player, buff, outgoing_inst)
				end
			end
		end,
		fireList = function(list: { Player }, value: ({
			caster: (Instance),
			comboCancelling: (number),
			isFeint: ((boolean)?),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 4)
			table.insert(outgoing_inst, value.caster)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, value.comboCancelling)
			if value.isFeint == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, value.isFeint and 1 or 0)
			end
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for _, player in list do
				unreliable:FireClient(player, buff, outgoing_inst)
			end
		end,
		fireSet = function(set: { [Player]: true }, value: ({
			caster: (Instance),
			comboCancelling: (number),
			isFeint: ((boolean)?),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 4)
			table.insert(outgoing_inst, value.caster)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, value.comboCancelling)
			if value.isFeint == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, value.isFeint and 1 or 0)
			end
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for player in set do
				unreliable:FireClient(player, buff, outgoing_inst)
			end
		end,
	}),
	EquipReplicate = table.freeze({
		fire = function(player: Player, value: ({
			status: ("Enable" | "Disable"),
			caster: (Instance),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 6)
			if value.status == "Enable" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			elseif value.status == "Disable" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			else
				error("Invalid enumerator")
			end
			table.insert(outgoing_inst, value.caster)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable:FireClient(player, buff, outgoing_inst)
		end,
		fireAll = function(value: ({
			status: ("Enable" | "Disable"),
			caster: (Instance),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 6)
			if value.status == "Enable" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			elseif value.status == "Disable" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			else
				error("Invalid enumerator")
			end
			table.insert(outgoing_inst, value.caster)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable:FireAllClients(buff, outgoing_inst)
		end,
		fireExcept = function(except: Player, value: ({
			status: ("Enable" | "Disable"),
			caster: (Instance),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 6)
			if value.status == "Enable" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			elseif value.status == "Disable" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			else
				error("Invalid enumerator")
			end
			table.insert(outgoing_inst, value.caster)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for _, player in Players:GetPlayers() do
				if player ~= except then
					unreliable:FireClient(player, buff, outgoing_inst)
				end
			end
		end,
		fireList = function(list: { Player }, value: ({
			status: ("Enable" | "Disable"),
			caster: (Instance),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 6)
			if value.status == "Enable" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			elseif value.status == "Disable" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			else
				error("Invalid enumerator")
			end
			table.insert(outgoing_inst, value.caster)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for _, player in list do
				unreliable:FireClient(player, buff, outgoing_inst)
			end
		end,
		fireSet = function(set: { [Player]: true }, value: ({
			status: ("Enable" | "Disable"),
			caster: (Instance),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 6)
			if value.status == "Enable" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			elseif value.status == "Disable" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			else
				error("Invalid enumerator")
			end
			table.insert(outgoing_inst, value.caster)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for player in set do
				unreliable:FireClient(player, buff, outgoing_inst)
			end
		end,
	}),
	OnDashCancelled = table.freeze({
		fire = function(player: Player, value: ({
			caster: (Instance),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 7)
			table.insert(outgoing_inst, value.caster)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable:FireClient(player, buff, outgoing_inst)
		end,
		fireAll = function(value: ({
			caster: (Instance),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 7)
			table.insert(outgoing_inst, value.caster)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable:FireAllClients(buff, outgoing_inst)
		end,
		fireExcept = function(except: Player, value: ({
			caster: (Instance),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 7)
			table.insert(outgoing_inst, value.caster)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for _, player in Players:GetPlayers() do
				if player ~= except then
					unreliable:FireClient(player, buff, outgoing_inst)
				end
			end
		end,
		fireList = function(list: { Player }, value: ({
			caster: (Instance),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 7)
			table.insert(outgoing_inst, value.caster)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for _, player in list do
				unreliable:FireClient(player, buff, outgoing_inst)
			end
		end,
		fireSet = function(set: { [Player]: true }, value: ({
			caster: (Instance),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 7)
			table.insert(outgoing_inst, value.caster)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for player in set do
				unreliable:FireClient(player, buff, outgoing_inst)
			end
		end,
	}),
	BlockReplication = table.freeze({
		fire = function(player: Player, value: ("Start" | "Stop"))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 9)
			if value == "Start" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			elseif value == "Stop" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			else
				error("Invalid enumerator")
			end
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable:FireClient(player, buff, outgoing_inst)
		end,
		fireAll = function(value: ("Start" | "Stop"))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 9)
			if value == "Start" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			elseif value == "Stop" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			else
				error("Invalid enumerator")
			end
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable:FireAllClients(buff, outgoing_inst)
		end,
		fireExcept = function(except: Player, value: ("Start" | "Stop"))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 9)
			if value == "Start" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			elseif value == "Stop" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			else
				error("Invalid enumerator")
			end
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for _, player in Players:GetPlayers() do
				if player ~= except then
					unreliable:FireClient(player, buff, outgoing_inst)
				end
			end
		end,
		fireList = function(list: { Player }, value: ("Start" | "Stop"))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 9)
			if value == "Start" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			elseif value == "Stop" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			else
				error("Invalid enumerator")
			end
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for _, player in list do
				unreliable:FireClient(player, buff, outgoing_inst)
			end
		end,
		fireSet = function(set: { [Player]: true }, value: ("Start" | "Stop"))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 9)
			if value == "Start" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			elseif value == "Stop" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			else
				error("Invalid enumerator")
			end
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for player in set do
				unreliable:FireClient(player, buff, outgoing_inst)
			end
		end,
	}),
	M2Replication = table.freeze({
		fire = function(player: Player, value: ({
			caster: (Instance),
			victim: ((Instance)?),
			weaponUsed: (string),
			timeCasted: (number),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 12)
			table.insert(outgoing_inst, value.caster)
			if value.victim == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				table.insert(outgoing_inst, value.victim)
			end
			local len_1 = #value.weaponUsed
			assert(len_1 <= 45)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, value.weaponUsed, len_1)
			alloc(8)
			buffer.writef64(outgoing_buff, outgoing_apos, value.timeCasted)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable:FireClient(player, buff, outgoing_inst)
		end,
		fireAll = function(value: ({
			caster: (Instance),
			victim: ((Instance)?),
			weaponUsed: (string),
			timeCasted: (number),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 12)
			table.insert(outgoing_inst, value.caster)
			if value.victim == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				table.insert(outgoing_inst, value.victim)
			end
			local len_1 = #value.weaponUsed
			assert(len_1 <= 45)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, value.weaponUsed, len_1)
			alloc(8)
			buffer.writef64(outgoing_buff, outgoing_apos, value.timeCasted)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable:FireAllClients(buff, outgoing_inst)
		end,
		fireExcept = function(except: Player, value: ({
			caster: (Instance),
			victim: ((Instance)?),
			weaponUsed: (string),
			timeCasted: (number),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 12)
			table.insert(outgoing_inst, value.caster)
			if value.victim == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				table.insert(outgoing_inst, value.victim)
			end
			local len_1 = #value.weaponUsed
			assert(len_1 <= 45)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, value.weaponUsed, len_1)
			alloc(8)
			buffer.writef64(outgoing_buff, outgoing_apos, value.timeCasted)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for _, player in Players:GetPlayers() do
				if player ~= except then
					unreliable:FireClient(player, buff, outgoing_inst)
				end
			end
		end,
		fireList = function(list: { Player }, value: ({
			caster: (Instance),
			victim: ((Instance)?),
			weaponUsed: (string),
			timeCasted: (number),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 12)
			table.insert(outgoing_inst, value.caster)
			if value.victim == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				table.insert(outgoing_inst, value.victim)
			end
			local len_1 = #value.weaponUsed
			assert(len_1 <= 45)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, value.weaponUsed, len_1)
			alloc(8)
			buffer.writef64(outgoing_buff, outgoing_apos, value.timeCasted)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for _, player in list do
				unreliable:FireClient(player, buff, outgoing_inst)
			end
		end,
		fireSet = function(set: { [Player]: true }, value: ({
			caster: (Instance),
			victim: ((Instance)?),
			weaponUsed: (string),
			timeCasted: (number),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 12)
			table.insert(outgoing_inst, value.caster)
			if value.victim == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				table.insert(outgoing_inst, value.victim)
			end
			local len_1 = #value.weaponUsed
			assert(len_1 <= 45)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, value.weaponUsed, len_1)
			alloc(8)
			buffer.writef64(outgoing_buff, outgoing_apos, value.timeCasted)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for player in set do
				unreliable:FireClient(player, buff, outgoing_inst)
			end
		end,
	}),
	DownSlamReplication = table.freeze({
		fire = function(player: Player, value: ({
			status: ("Cast" | "Hit"),
			weaponUsed: (string),
			caster: (Instance),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 15)
			if value.status == "Cast" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			elseif value.status == "Hit" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			else
				error("Invalid enumerator")
			end
			local len_1 = #value.weaponUsed
			assert(len_1 <= 50)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, value.weaponUsed, len_1)
			table.insert(outgoing_inst, value.caster)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable:FireClient(player, buff, outgoing_inst)
		end,
		fireAll = function(value: ({
			status: ("Cast" | "Hit"),
			weaponUsed: (string),
			caster: (Instance),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 15)
			if value.status == "Cast" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			elseif value.status == "Hit" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			else
				error("Invalid enumerator")
			end
			local len_1 = #value.weaponUsed
			assert(len_1 <= 50)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, value.weaponUsed, len_1)
			table.insert(outgoing_inst, value.caster)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable:FireAllClients(buff, outgoing_inst)
		end,
		fireExcept = function(except: Player, value: ({
			status: ("Cast" | "Hit"),
			weaponUsed: (string),
			caster: (Instance),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 15)
			if value.status == "Cast" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			elseif value.status == "Hit" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			else
				error("Invalid enumerator")
			end
			local len_1 = #value.weaponUsed
			assert(len_1 <= 50)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, value.weaponUsed, len_1)
			table.insert(outgoing_inst, value.caster)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for _, player in Players:GetPlayers() do
				if player ~= except then
					unreliable:FireClient(player, buff, outgoing_inst)
				end
			end
		end,
		fireList = function(list: { Player }, value: ({
			status: ("Cast" | "Hit"),
			weaponUsed: (string),
			caster: (Instance),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 15)
			if value.status == "Cast" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			elseif value.status == "Hit" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			else
				error("Invalid enumerator")
			end
			local len_1 = #value.weaponUsed
			assert(len_1 <= 50)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, value.weaponUsed, len_1)
			table.insert(outgoing_inst, value.caster)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for _, player in list do
				unreliable:FireClient(player, buff, outgoing_inst)
			end
		end,
		fireSet = function(set: { [Player]: true }, value: ({
			status: ("Cast" | "Hit"),
			weaponUsed: (string),
			caster: (Instance),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 15)
			if value.status == "Cast" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			elseif value.status == "Hit" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			else
				error("Invalid enumerator")
			end
			local len_1 = #value.weaponUsed
			assert(len_1 <= 50)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, value.weaponUsed, len_1)
			table.insert(outgoing_inst, value.caster)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for player in set do
				unreliable:FireClient(player, buff, outgoing_inst)
			end
		end,
	}),
	ReplicateRagdoll = table.freeze({
		fire = function(player: Player, value: (boolean))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 16)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, value and 1 or 0)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable:FireClient(player, buff, outgoing_inst)
		end,
		fireAll = function(value: (boolean))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 16)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, value and 1 or 0)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable:FireAllClients(buff, outgoing_inst)
		end,
		fireExcept = function(except: Player, value: (boolean))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 16)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, value and 1 or 0)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for _, player in Players:GetPlayers() do
				if player ~= except then
					unreliable:FireClient(player, buff, outgoing_inst)
				end
			end
		end,
		fireList = function(list: { Player }, value: (boolean))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 16)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, value and 1 or 0)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for _, player in list do
				unreliable:FireClient(player, buff, outgoing_inst)
			end
		end,
		fireSet = function(set: { [Player]: true }, value: (boolean))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 16)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, value and 1 or 0)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for player in set do
				unreliable:FireClient(player, buff, outgoing_inst)
			end
		end,
	}),
	SprintM1Replication = table.freeze({
		fire = function(player: Player, value: ({
			caster: (Instance),
			victim: ((Instance)?),
			weaponUsed: (string),
			status: ("Start" | "Hit"),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 18)
			table.insert(outgoing_inst, value.caster)
			if value.victim == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				table.insert(outgoing_inst, value.victim)
			end
			local len_1 = #value.weaponUsed
			assert(len_1 <= 50)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, value.weaponUsed, len_1)
			if value.status == "Start" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			elseif value.status == "Hit" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			else
				error("Invalid enumerator")
			end
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable:FireClient(player, buff, outgoing_inst)
		end,
		fireAll = function(value: ({
			caster: (Instance),
			victim: ((Instance)?),
			weaponUsed: (string),
			status: ("Start" | "Hit"),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 18)
			table.insert(outgoing_inst, value.caster)
			if value.victim == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				table.insert(outgoing_inst, value.victim)
			end
			local len_1 = #value.weaponUsed
			assert(len_1 <= 50)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, value.weaponUsed, len_1)
			if value.status == "Start" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			elseif value.status == "Hit" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			else
				error("Invalid enumerator")
			end
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable:FireAllClients(buff, outgoing_inst)
		end,
		fireExcept = function(except: Player, value: ({
			caster: (Instance),
			victim: ((Instance)?),
			weaponUsed: (string),
			status: ("Start" | "Hit"),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 18)
			table.insert(outgoing_inst, value.caster)
			if value.victim == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				table.insert(outgoing_inst, value.victim)
			end
			local len_1 = #value.weaponUsed
			assert(len_1 <= 50)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, value.weaponUsed, len_1)
			if value.status == "Start" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			elseif value.status == "Hit" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			else
				error("Invalid enumerator")
			end
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for _, player in Players:GetPlayers() do
				if player ~= except then
					unreliable:FireClient(player, buff, outgoing_inst)
				end
			end
		end,
		fireList = function(list: { Player }, value: ({
			caster: (Instance),
			victim: ((Instance)?),
			weaponUsed: (string),
			status: ("Start" | "Hit"),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 18)
			table.insert(outgoing_inst, value.caster)
			if value.victim == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				table.insert(outgoing_inst, value.victim)
			end
			local len_1 = #value.weaponUsed
			assert(len_1 <= 50)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, value.weaponUsed, len_1)
			if value.status == "Start" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			elseif value.status == "Hit" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			else
				error("Invalid enumerator")
			end
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for _, player in list do
				unreliable:FireClient(player, buff, outgoing_inst)
			end
		end,
		fireSet = function(set: { [Player]: true }, value: ({
			caster: (Instance),
			victim: ((Instance)?),
			weaponUsed: (string),
			status: ("Start" | "Hit"),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 18)
			table.insert(outgoing_inst, value.caster)
			if value.victim == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				table.insert(outgoing_inst, value.victim)
			end
			local len_1 = #value.weaponUsed
			assert(len_1 <= 50)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, value.weaponUsed, len_1)
			if value.status == "Start" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			elseif value.status == "Hit" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			else
				error("Invalid enumerator")
			end
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for player in set do
				unreliable:FireClient(player, buff, outgoing_inst)
			end
		end,
	}),
	SlideReplication = table.freeze({
		fire = function(player: Player, value: ({
			caster: (Instance),
			status: ("Start" | "End"),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 19)
			table.insert(outgoing_inst, value.caster)
			if value.status == "Start" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			elseif value.status == "End" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			else
				error("Invalid enumerator")
			end
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable:FireClient(player, buff, outgoing_inst)
		end,
		fireAll = function(value: ({
			caster: (Instance),
			status: ("Start" | "End"),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 19)
			table.insert(outgoing_inst, value.caster)
			if value.status == "Start" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			elseif value.status == "End" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			else
				error("Invalid enumerator")
			end
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable:FireAllClients(buff, outgoing_inst)
		end,
		fireExcept = function(except: Player, value: ({
			caster: (Instance),
			status: ("Start" | "End"),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 19)
			table.insert(outgoing_inst, value.caster)
			if value.status == "Start" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			elseif value.status == "End" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			else
				error("Invalid enumerator")
			end
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for _, player in Players:GetPlayers() do
				if player ~= except then
					unreliable:FireClient(player, buff, outgoing_inst)
				end
			end
		end,
		fireList = function(list: { Player }, value: ({
			caster: (Instance),
			status: ("Start" | "End"),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 19)
			table.insert(outgoing_inst, value.caster)
			if value.status == "Start" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			elseif value.status == "End" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			else
				error("Invalid enumerator")
			end
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for _, player in list do
				unreliable:FireClient(player, buff, outgoing_inst)
			end
		end,
		fireSet = function(set: { [Player]: true }, value: ({
			caster: (Instance),
			status: ("Start" | "End"),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 19)
			table.insert(outgoing_inst, value.caster)
			if value.status == "Start" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			elseif value.status == "End" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			else
				error("Invalid enumerator")
			end
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for player in set do
				unreliable:FireClient(player, buff, outgoing_inst)
			end
		end,
	}),
	ClimbReplication = table.freeze({
		fire = function(player: Player)
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 21)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable:FireClient(player, buff, outgoing_inst)
		end,
		fireAll = function()
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 21)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable:FireAllClients(buff, outgoing_inst)
		end,
		fireExcept = function(except: Player)
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 21)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for _, player in Players:GetPlayers() do
				if player ~= except then
					unreliable:FireClient(player, buff, outgoing_inst)
				end
			end
		end,
		fireList = function(list: { Player })
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 21)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for _, player in list do
				unreliable:FireClient(player, buff, outgoing_inst)
			end
		end,
		fireSet = function(set: { [Player]: true })
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 21)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for player in set do
				unreliable:FireClient(player, buff, outgoing_inst)
			end
		end,
	}),
	M1 = table.freeze({
		setCallback = function(callback: (Player) -> ()): () -> ()
			events[2] = callback
			return function()
				events[2] = nil
			end
		end,
	}),
	Equip = table.freeze({
		setCallback = function(callback: (Player) -> ()): () -> ()
			events[5] = callback
			return function()
				events[5] = nil
			end
		end,
	}),
	Block = table.freeze({
		setCallback = function(callback: (Player, ("Begin" | "End")) -> ()): () -> ()
			events[8] = callback
			return function()
				events[8] = nil
			end
		end,
	}),
	Sprint = table.freeze({
		setCallback = function(callback: (Player, ("Begin" | "End")) -> ()): () -> ()
			events[10] = callback
			return function()
				events[10] = nil
			end
		end,
	}),
	M2 = table.freeze({
		setCallback = function(callback: (Player) -> ()): () -> ()
			events[11] = callback
			return function()
				events[11] = nil
			end
		end,
	}),
	Feint = table.freeze({
		setCallback = function(callback: (Player) -> ()): () -> ()
			events[13] = callback
			return function()
				events[13] = nil
			end
		end,
	}),
	DownSlam = table.freeze({
		setCallback = function(callback: (Player) -> ()): () -> ()
			events[14] = callback
			return function()
				events[14] = nil
			end
		end,
	}),
	SprintM1 = table.freeze({
		setCallback = function(callback: (Player) -> ()): () -> ()
			events[17] = callback
			return function()
				events[17] = nil
			end
		end,
	}),
	Climb = table.freeze({
		setCallback = function(callback: (Player) -> ()): () -> ()
			events[20] = callback
			return function()
				events[20] = nil
			end
		end,
	}),
	NotifyClimb = table.freeze({
		setCallback = function(callback: (Player) -> ()): () -> ()
			events[22] = callback
			return function()
				events[22] = nil
			end
		end,
	}),
	Dash = table.freeze({
		setCallback = function(callback: (Player, ("Horizontal" | "Vertical")) -> (("Success" | "Failure"))): () -> ()
			events[23] = callback
			return function()
				events[23] = nil
			end
		end,
	}),
	Slide = table.freeze({
		setCallback = function(callback: (Player, ("Begin" | "End")) -> (({
			attempt: ("Success" | "Failure"),
			status: (("Start" | "End")?),
		}))): () -> ()
			events[24] = callback
			return function()
				events[24] = nil
			end
		end,
	}),
	DoubleJump = table.freeze({
		setCallback = function(callback: (Player) -> (("Success" | "Failure"))): () -> ()
			events[25] = callback
			return function()
				events[25] = nil
			end
		end,
	}),
})
type Events = typeof(returns)
return returns
