--!native
--!optimize 2
--!nocheck
--!nolint
--#selene: allow(unused_variable, incorrect_standard_library_use, global_usage)
-- Client generated by Zap v0.6.8 (https://github.com/red-blox/zap)
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local outgoing_buff: buffer
local outgoing_used: number
local outgoing_size: number
local outgoing_inst: { Instance }
local outgoing_apos: number

local incoming_buff: buffer
local incoming_read: number
local incoming_inst: { Instance }
local incoming_ipos: number

-- thanks to https://dom.rojo.space/binary.html#cframe
local CFrameSpecialCases = {
	CFrame.Angles(0, 0, 0),
	CFrame.Angles(math.rad(90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(180)),
	CFrame.Angles(math.rad(-90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(90)),
	CFrame.Angles(0, math.rad(90), math.rad(90)),
	CFrame.Angles(0, 0, math.rad(90)),
	CFrame.Angles(0, math.rad(-90), math.rad(90)),
	CFrame.Angles(math.rad(-90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(-90), 0),
	CFrame.Angles(math.rad(90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(90), math.rad(180)),
	CFrame.Angles(0, math.rad(-90), math.rad(180)),
	CFrame.Angles(0, math.rad(180), math.rad(0)),
	CFrame.Angles(math.rad(-90), math.rad(-180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(180)),
	CFrame.Angles(math.rad(90), math.rad(180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(-90)),
	CFrame.Angles(0, math.rad(-90), math.rad(-90)),
	CFrame.Angles(0, math.rad(-180), math.rad(-90)),
	CFrame.Angles(0, math.rad(90), math.rad(-90)),
	CFrame.Angles(math.rad(90), math.rad(90), 0),
	CFrame.Angles(0, math.rad(90), 0),
	CFrame.Angles(math.rad(-90), math.rad(90), 0),
}

local function alloc(len: number)
	if outgoing_used + len > outgoing_size then
		while outgoing_used + len > outgoing_size do
			outgoing_size = outgoing_size * 2
		end

		local new_buff = buffer.create(outgoing_size)
		buffer.copy(new_buff, 0, outgoing_buff, 0, outgoing_used)

		outgoing_buff = new_buff
	end

	outgoing_apos = outgoing_used
	outgoing_used = outgoing_used + len

	return outgoing_apos
end

local function read(len: number)
	local pos = incoming_read
	incoming_read = incoming_read + len

	return pos
end

local function save()
	return {
		buff = outgoing_buff,
		used = outgoing_used,
		size = outgoing_size,
		inst = outgoing_inst,
	}
end

local function load(data: {
	buff: buffer,
	used: number,
	size: number,
	inst: { Instance },
})
	outgoing_buff = data.buff
	outgoing_used = data.used
	outgoing_size = data.size
	outgoing_inst = data.inst
end

local function load_empty()
	outgoing_buff = buffer.create(64)
	outgoing_used = 0
	outgoing_size = 64
	outgoing_inst = {}
end

load_empty()

local types = {}
if not RunService:IsRunning() then
	local noop = function() end
	return table.freeze({
		sendEvents = noop,
		CallFX = table.freeze({
			setCallback = noop
		}),
		M1 = table.freeze({
			fire = noop
		}),
		M1Replication = table.freeze({
			setCallback = noop
		}),
		OnM1Cancelled = table.freeze({
			setCallback = noop
		}),
		Equip = table.freeze({
			fire = noop
		}),
		EquipReplicate = table.freeze({
			setCallback = noop
		}),
		OnDashCancelled = table.freeze({
			setCallback = noop
		}),
		Block = table.freeze({
			fire = noop
		}),
		BlockReplication = table.freeze({
			setCallback = noop
		}),
		Sprint = table.freeze({
			fire = noop
		}),
		M2 = table.freeze({
			fire = noop
		}),
		M2Replication = table.freeze({
			setCallback = noop
		}),
		Feint = table.freeze({
			fire = noop
		}),
		DownSlam = table.freeze({
			fire = noop
		}),
		DownSlamReplication = table.freeze({
			setCallback = noop
		}),
		ReplicateRagdoll = table.freeze({
			setCallback = noop
		}),
		SprintM1 = table.freeze({
			fire = noop
		}),
		SprintM1Replication = table.freeze({
			setCallback = noop
		}),
		SlideReplication = table.freeze({
			setCallback = noop
		}),
		Climb = table.freeze({
			fire = noop
		}),
		ClimbReplication = table.freeze({
			setCallback = noop
		}),
		NotifyClimb = table.freeze({
			fire = noop
		}),
		Dash = table.freeze({
			call = noop
		}),
		Slide = table.freeze({
			call = noop
		}),
		DoubleJump = table.freeze({
			call = noop
		}),
	}) :: Events
end
if RunService:IsServer() then
	error("Cannot use the client module on the server!")
end
local reliable = ReplicatedStorage:WaitForChild("Anti_Skid_9000_RELIABLE")
local unreliable = ReplicatedStorage:WaitForChild("Anti_Skid_9000_UNRELIABLE")

assert(reliable:IsA("RemoteEvent"), "Expected Anti_Skid_9000_RELIABLE to be a RemoteEvent")
assert(unreliable:IsA("UnreliableRemoteEvent"), "Expected Anti_Skid_9000_UNRELIABLE to be an UnreliableRemoteEvent")


local function sendEvents()
	if outgoing_used ~= 0 then
		local buff = buffer.create(outgoing_used)
		buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)

		reliable:FireServer(buff, outgoing_inst)

		outgoing_buff = buffer.create(64)
		outgoing_used = 0
		outgoing_size = 64
		table.clear(outgoing_inst)
	end
end

RunService.Heartbeat:Connect(sendEvents)

local events = table.create(25)
local event_queue: { [number]: { any } } = table.create(25)
local function_call_id = 0
local Promise = require(game:GetService('ReplicatedStorage').Packages['_Index']['evaera_promise@4.0.0'].promise)
event_queue[1] = {}
event_queue[3] = {}
event_queue[4] = {}
event_queue[6] = {}
event_queue[7] = {}
event_queue[9] = {}
event_queue[12] = {}
event_queue[15] = {}
event_queue[16] = {}
event_queue[18] = {}
event_queue[19] = {}
event_queue[21] = 0
event_queue[23] = table.create(255)
event_queue[24] = table.create(255)
event_queue[25] = table.create(255)
reliable.OnClientEvent:Connect(function(buff, inst)
	incoming_buff = buff
	incoming_inst = inst
	incoming_read = 0
	incoming_ipos = 0
	local len = buffer.len(buff)
	while incoming_read < len do
		local id = buffer.readu8(buff, read(1))
		if id == 23 then
			local call_id = buffer.readu8(incoming_buff, read(1))
			local value
			value = {}
			local enum_value_1 = buffer.readu8(incoming_buff, read(1))
			if enum_value_1 == 0 then
				value = "Success"
			elseif enum_value_1 == 1 then
				value = "Failure"
			else
				error("Invalid enumerator")
			end
			event_queue[23][call_id](value)
			event_queue[23][call_id] = nil
		elseif id == 24 then
			local call_id = buffer.readu8(incoming_buff, read(1))
			local value
			value = {}
			value.attempt = {}
			local enum_value_1 = buffer.readu8(incoming_buff, read(1))
			if enum_value_1 == 0 then
				value.attempt = "Success"
			elseif enum_value_1 == 1 then
				value.attempt = "Failure"
			else
				error("Invalid enumerator")
			end
			if buffer.readu8(incoming_buff, read(1)) == 1 then
				value.status = {}
				local enum_value_2 = buffer.readu8(incoming_buff, read(1))
				if enum_value_2 == 0 then
					value.status = "Start"
				elseif enum_value_2 == 1 then
					value.status = "End"
				else
					error("Invalid enumerator")
				end
			else
				value.status = nil
			end
			event_queue[24][call_id](value)
			event_queue[24][call_id] = nil
		elseif id == 25 then
			local call_id = buffer.readu8(incoming_buff, read(1))
			local value
			value = {}
			local enum_value_1 = buffer.readu8(incoming_buff, read(1))
			if enum_value_1 == 0 then
				value = "Success"
			elseif enum_value_1 == 1 then
				value = "Failure"
			else
				error("Invalid enumerator")
			end
			event_queue[25][call_id](value)
			event_queue[25][call_id] = nil
		else
			error("Unknown event id")
		end
	end
end)
unreliable.OnClientEvent:Connect(function(buff, inst)
	incoming_buff = buff
	incoming_inst = inst
	incoming_read = 0
	incoming_ipos = 0
	local id = buffer.readu8(buff, read(1))
	if id == 1 then
		local value
		value = {}
		local len_1 = buffer.readu16(incoming_buff, read(2))
		assert(len_1 >= 0)
		assert(len_1 <= 50)
		value.effectName = buffer.readstring(incoming_buff, read(len_1), len_1)
		local len_2 = buffer.readu16(incoming_buff, read(2))
		assert(len_2 >= 0)
		assert(len_2 <= 25)
		value.stage = buffer.readstring(incoming_buff, read(len_2), len_2)
		value.miscData = {}
		incoming_ipos = incoming_ipos + 1
		value.miscData.caster = incoming_inst[incoming_ipos]
		assert(value.miscData.caster ~= nil)
		if buffer.readu8(incoming_buff, read(1)) == 1 then
			incoming_ipos = incoming_ipos + 1
			value.miscData.victim = incoming_inst[incoming_ipos]
		else
			value.miscData.victim = nil
		end
		if buffer.readu8(incoming_buff, read(1)) == 1 then
			incoming_ipos = incoming_ipos + 1
			value.miscData.extraData = incoming_inst[incoming_ipos]
		else
			value.miscData.extraData = nil
		end
		if events[1] then
			task.spawn(events[1], value)
		else
			table.insert(event_queue[1], value)
			if #event_queue[1] > 64 then
				warn(`[ZAP] {#event_queue[1]} events in queue for CallFX. Did you forget to attach a listener?`)
			end
		end
	elseif id == 3 then
		local value
		value = {}
		incoming_ipos = incoming_ipos + 1
		value.caster = incoming_inst[incoming_ipos]
		assert(value.caster ~= nil)
		if buffer.readu8(incoming_buff, read(1)) == 1 then
			incoming_ipos = incoming_ipos + 1
			value.victim = incoming_inst[incoming_ipos]
		else
			value.victim = nil
		end
		local len_1 = buffer.readu16(incoming_buff, read(2))
		assert(len_1 <= 45)
		value.weaponUsed = buffer.readstring(incoming_buff, read(len_1), len_1)
		value.comboCount = buffer.readu8(incoming_buff, read(1))
		assert(value.comboCount <= 4)
		value.timeCasted = buffer.readf64(incoming_buff, read(8))
		if events[3] then
			task.spawn(events[3], value)
		else
			table.insert(event_queue[3], value)
			if #event_queue[3] > 64 then
				warn(`[ZAP] {#event_queue[3]} events in queue for M1Replication. Did you forget to attach a listener?`)
			end
		end
	elseif id == 4 then
		local value
		value = {}
		incoming_ipos = incoming_ipos + 1
		value.caster = incoming_inst[incoming_ipos]
		assert(value.caster ~= nil)
		value.comboCancelling = buffer.readu8(incoming_buff, read(1))
		if buffer.readu8(incoming_buff, read(1)) == 1 then
			value.isFeint = buffer.readu8(incoming_buff, read(1)) == 1
		else
			value.isFeint = nil
		end
		if events[4] then
			task.spawn(events[4], value)
		else
			table.insert(event_queue[4], value)
			if #event_queue[4] > 64 then
				warn(`[ZAP] {#event_queue[4]} events in queue for OnM1Cancelled. Did you forget to attach a listener?`)
			end
		end
	elseif id == 6 then
		local value
		value = {}
		value.status = {}
		local enum_value_1 = buffer.readu8(incoming_buff, read(1))
		if enum_value_1 == 0 then
			value.status = "Enable"
		elseif enum_value_1 == 1 then
			value.status = "Disable"
		else
			error("Invalid enumerator")
		end
		incoming_ipos = incoming_ipos + 1
		value.caster = incoming_inst[incoming_ipos]
		assert(value.caster ~= nil)
		if events[6] then
			task.spawn(events[6], value)
		else
			table.insert(event_queue[6], value)
			if #event_queue[6] > 64 then
				warn(`[ZAP] {#event_queue[6]} events in queue for EquipReplicate. Did you forget to attach a listener?`)
			end
		end
	elseif id == 7 then
		local value
		value = {}
		incoming_ipos = incoming_ipos + 1
		value.caster = incoming_inst[incoming_ipos]
		assert(value.caster ~= nil)
		if events[7] then
			task.spawn(events[7], value)
		else
			table.insert(event_queue[7], value)
			if #event_queue[7] > 64 then
				warn(`[ZAP] {#event_queue[7]} events in queue for OnDashCancelled. Did you forget to attach a listener?`)
			end
		end
	elseif id == 9 then
		local value
		value = {}
		local enum_value_1 = buffer.readu8(incoming_buff, read(1))
		if enum_value_1 == 0 then
			value = "Start"
		elseif enum_value_1 == 1 then
			value = "Stop"
		else
			error("Invalid enumerator")
		end
		if events[9] then
			task.spawn(events[9], value)
		else
			table.insert(event_queue[9], value)
			if #event_queue[9] > 64 then
				warn(`[ZAP] {#event_queue[9]} events in queue for BlockReplication. Did you forget to attach a listener?`)
			end
		end
	elseif id == 12 then
		local value
		value = {}
		incoming_ipos = incoming_ipos + 1
		value.caster = incoming_inst[incoming_ipos]
		assert(value.caster ~= nil)
		if buffer.readu8(incoming_buff, read(1)) == 1 then
			incoming_ipos = incoming_ipos + 1
			value.victim = incoming_inst[incoming_ipos]
		else
			value.victim = nil
		end
		local len_1 = buffer.readu16(incoming_buff, read(2))
		assert(len_1 <= 45)
		value.weaponUsed = buffer.readstring(incoming_buff, read(len_1), len_1)
		value.timeCasted = buffer.readf64(incoming_buff, read(8))
		if events[12] then
			task.spawn(events[12], value)
		else
			table.insert(event_queue[12], value)
			if #event_queue[12] > 64 then
				warn(`[ZAP] {#event_queue[12]} events in queue for M2Replication. Did you forget to attach a listener?`)
			end
		end
	elseif id == 15 then
		local value
		value = {}
		value.status = {}
		local enum_value_1 = buffer.readu8(incoming_buff, read(1))
		if enum_value_1 == 0 then
			value.status = "Cast"
		elseif enum_value_1 == 1 then
			value.status = "Hit"
		else
			error("Invalid enumerator")
		end
		local len_1 = buffer.readu16(incoming_buff, read(2))
		assert(len_1 <= 50)
		value.weaponUsed = buffer.readstring(incoming_buff, read(len_1), len_1)
		incoming_ipos = incoming_ipos + 1
		value.caster = incoming_inst[incoming_ipos]
		assert(value.caster ~= nil)
		if events[15] then
			task.spawn(events[15], value)
		else
			table.insert(event_queue[15], value)
			if #event_queue[15] > 64 then
				warn(`[ZAP] {#event_queue[15]} events in queue for DownSlamReplication. Did you forget to attach a listener?`)
			end
		end
	elseif id == 16 then
		local value
		value = buffer.readu8(incoming_buff, read(1)) == 1
		if events[16] then
			task.spawn(events[16], value)
		else
			table.insert(event_queue[16], value)
			if #event_queue[16] > 64 then
				warn(`[ZAP] {#event_queue[16]} events in queue for ReplicateRagdoll. Did you forget to attach a listener?`)
			end
		end
	elseif id == 18 then
		local value
		value = {}
		incoming_ipos = incoming_ipos + 1
		value.caster = incoming_inst[incoming_ipos]
		assert(value.caster ~= nil)
		if buffer.readu8(incoming_buff, read(1)) == 1 then
			incoming_ipos = incoming_ipos + 1
			value.victim = incoming_inst[incoming_ipos]
		else
			value.victim = nil
		end
		local len_1 = buffer.readu16(incoming_buff, read(2))
		assert(len_1 <= 50)
		value.weaponUsed = buffer.readstring(incoming_buff, read(len_1), len_1)
		value.status = {}
		local enum_value_1 = buffer.readu8(incoming_buff, read(1))
		if enum_value_1 == 0 then
			value.status = "Start"
		elseif enum_value_1 == 1 then
			value.status = "Hit"
		else
			error("Invalid enumerator")
		end
		if events[18] then
			task.spawn(events[18], value)
		else
			table.insert(event_queue[18], value)
			if #event_queue[18] > 64 then
				warn(`[ZAP] {#event_queue[18]} events in queue for SprintM1Replication. Did you forget to attach a listener?`)
			end
		end
	elseif id == 19 then
		local value
		value = {}
		incoming_ipos = incoming_ipos + 1
		value.caster = incoming_inst[incoming_ipos]
		assert(value.caster ~= nil)
		value.status = {}
		local enum_value_1 = buffer.readu8(incoming_buff, read(1))
		if enum_value_1 == 0 then
			value.status = "Start"
		elseif enum_value_1 == 1 then
			value.status = "End"
		else
			error("Invalid enumerator")
		end
		if events[19] then
			task.spawn(events[19], value)
		else
			table.insert(event_queue[19], value)
			if #event_queue[19] > 64 then
				warn(`[ZAP] {#event_queue[19]} events in queue for SlideReplication. Did you forget to attach a listener?`)
			end
		end
	elseif id == 21 then
		local value
		if events[21] then
			task.spawn(events[21], value)
		else
			event_queue[21] += 1
			if event_queue[21] > 16 then
				warn(`[ZAP] {event_queue[21]} events in queue for ClimbReplication. Did you forget to attach a listener?`)
			end
		end
	else
		error("Unknown event id")
	end
end)
local returns = table.freeze({
	sendEvents = sendEvents,
	M1 = table.freeze({
		fire = function()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 2)
		end,
	}),
	Equip = table.freeze({
		fire = function()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 5)
		end,
	}),
	Block = table.freeze({
		fire = function(value: ("Begin" | "End"))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 8)
			if value == "Begin" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			elseif value == "End" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			else
				error("Invalid enumerator")
			end
		end,
	}),
	Sprint = table.freeze({
		fire = function(value: ("Begin" | "End"))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 10)
			if value == "Begin" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			elseif value == "End" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			else
				error("Invalid enumerator")
			end
		end,
	}),
	M2 = table.freeze({
		fire = function()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 11)
		end,
	}),
	Feint = table.freeze({
		fire = function()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 13)
		end,
	}),
	DownSlam = table.freeze({
		fire = function()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 14)
		end,
	}),
	SprintM1 = table.freeze({
		fire = function()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 17)
		end,
	}),
	Climb = table.freeze({
		fire = function()
			local saved = save()
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 20)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable:FireServer(buff, outgoing_inst)
			load(saved)
		end,
	}),
	NotifyClimb = table.freeze({
		fire = function()
			local saved = save()
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 22)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable:FireServer(buff, outgoing_inst)
			load(saved)
		end,
	}),
	CallFX = table.freeze({
		setCallback = function(callback: (({
			effectName: (string),
			stage: (string),
			miscData: ({
				caster: (Instance),
				victim: ((Instance)?),
				extraData: ((unknown)),
			}),
		})) -> ()): () -> ()
			events[1] = callback
			for _, value in event_queue[1] do
				task.spawn(callback, value)
			end
			event_queue[1] = {}
			return function()
				events[1] = nil
			end
		end,
	}),
	M1Replication = table.freeze({
		setCallback = function(callback: (({
			caster: (Instance),
			victim: ((Instance)?),
			weaponUsed: (string),
			comboCount: (number),
			timeCasted: (number),
		})) -> ()): () -> ()
			events[3] = callback
			for _, value in event_queue[3] do
				task.spawn(callback, value)
			end
			event_queue[3] = {}
			return function()
				events[3] = nil
			end
		end,
	}),
	OnM1Cancelled = table.freeze({
		setCallback = function(callback: (({
			caster: (Instance),
			comboCancelling: (number),
			isFeint: ((boolean)?),
		})) -> ()): () -> ()
			events[4] = callback
			for _, value in event_queue[4] do
				task.spawn(callback, value)
			end
			event_queue[4] = {}
			return function()
				events[4] = nil
			end
		end,
	}),
	EquipReplicate = table.freeze({
		setCallback = function(callback: (({
			status: ("Enable" | "Disable"),
			caster: (Instance),
		})) -> ()): () -> ()
			events[6] = callback
			for _, value in event_queue[6] do
				task.spawn(callback, value)
			end
			event_queue[6] = {}
			return function()
				events[6] = nil
			end
		end,
	}),
	OnDashCancelled = table.freeze({
		setCallback = function(callback: (({
			caster: (Instance),
		})) -> ()): () -> ()
			events[7] = callback
			for _, value in event_queue[7] do
				task.spawn(callback, value)
			end
			event_queue[7] = {}
			return function()
				events[7] = nil
			end
		end,
	}),
	BlockReplication = table.freeze({
		setCallback = function(callback: (("Start" | "Stop")) -> ()): () -> ()
			events[9] = callback
			for _, value in event_queue[9] do
				task.spawn(callback, value)
			end
			event_queue[9] = {}
			return function()
				events[9] = nil
			end
		end,
	}),
	M2Replication = table.freeze({
		setCallback = function(callback: (({
			caster: (Instance),
			victim: ((Instance)?),
			weaponUsed: (string),
			timeCasted: (number),
		})) -> ()): () -> ()
			events[12] = callback
			for _, value in event_queue[12] do
				task.spawn(callback, value)
			end
			event_queue[12] = {}
			return function()
				events[12] = nil
			end
		end,
	}),
	DownSlamReplication = table.freeze({
		setCallback = function(callback: (({
			status: ("Cast" | "Hit"),
			weaponUsed: (string),
			caster: (Instance),
		})) -> ()): () -> ()
			events[15] = callback
			for _, value in event_queue[15] do
				task.spawn(callback, value)
			end
			event_queue[15] = {}
			return function()
				events[15] = nil
			end
		end,
	}),
	ReplicateRagdoll = table.freeze({
		setCallback = function(callback: ((boolean)) -> ()): () -> ()
			events[16] = callback
			for _, value in event_queue[16] do
				task.spawn(callback, value)
			end
			event_queue[16] = {}
			return function()
				events[16] = nil
			end
		end,
	}),
	SprintM1Replication = table.freeze({
		setCallback = function(callback: (({
			caster: (Instance),
			victim: ((Instance)?),
			weaponUsed: (string),
			status: ("Start" | "Hit"),
		})) -> ()): () -> ()
			events[18] = callback
			for _, value in event_queue[18] do
				task.spawn(callback, value)
			end
			event_queue[18] = {}
			return function()
				events[18] = nil
			end
		end,
	}),
	SlideReplication = table.freeze({
		setCallback = function(callback: (({
			caster: (Instance),
			status: ("Start" | "End"),
		})) -> ()): () -> ()
			events[19] = callback
			for _, value in event_queue[19] do
				task.spawn(callback, value)
			end
			event_queue[19] = {}
			return function()
				events[19] = nil
			end
		end,
	}),
	ClimbReplication = table.freeze({
		setCallback = function(callback: () -> ()): () -> ()
			events[21] = callback
			for _ = 1, event_queue[21] do
				task.spawn(callback)
			end
			event_queue[21] = 0
			return function()
				events[21] = nil
			end
		end,
	}),
	Dash = table.freeze({
		call = function(value: ("Horizontal" | "Vertical"))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 23)
			function_call_id += 1
			function_call_id %= 256
			if event_queue[23][function_call_id] then
				function_call_id -= 1
				error("Zap has more than 256 calls awaiting a response, and therefore this packet has been dropped")
			end
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, function_call_id)
			if value == "Horizontal" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			elseif value == "Vertical" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			else
				error("Invalid enumerator")
			end
			local value = Promise.new(function(resolve)
				event_queue[23][function_call_id] = resolve
			end)
			return value
		end,
	}),
	Slide = table.freeze({
		call = function(value: ("Begin" | "End"))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 24)
			function_call_id += 1
			function_call_id %= 256
			if event_queue[24][function_call_id] then
				function_call_id -= 1
				error("Zap has more than 256 calls awaiting a response, and therefore this packet has been dropped")
			end
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, function_call_id)
			if value == "Begin" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			elseif value == "End" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			else
				error("Invalid enumerator")
			end
			local value = Promise.new(function(resolve)
				event_queue[24][function_call_id] = resolve
			end)
			return value
		end,
	}),
	DoubleJump = table.freeze({
		call = function()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 25)
			function_call_id += 1
			function_call_id %= 256
			if event_queue[25][function_call_id] then
				function_call_id -= 1
				error("Zap has more than 256 calls awaiting a response, and therefore this packet has been dropped")
			end
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, function_call_id)
			local value = Promise.new(function(resolve)
				event_queue[25][function_call_id] = resolve
			end)
			return value
		end,
	}),
})
type Events = typeof(returns)
return returns
